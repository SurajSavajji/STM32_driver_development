/*
 * stm32f407xx_spi_driver.c
 *
 *  Created on: 20-Oct-2023
 *      Author: suraj.sd
 */

#include "stm32f407xx_spi_driver.h"


uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx,uint32_t FlagName)
{
	if(pSPIx->SR & FlagName)
	{
		return FLAG_SET;
	}
	return FLAG_RESET;
}

/*
 * Peripheral clock setup
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx,uint8_t EnorDi)
{
	if(EnorDi == ENABLE)
	{
		if(pSPIx == SPI1)
		{
			SPI1_PCLK_EN();
		}
		else if(pSPIx == SPI2)
		{
			SPI2_PCLK_EN();
		}
		else if(pSPIx == SPI3){
			SPI3_PCLK_EN();
		}
	}
	else
	{
		if(pSPIx == SPI1)
		{
			SPI1_PCLK_DI();
		}
		else if(pSPIx == SPI2)
		{
			SPI2_PCLK_DI();
		}
		else if(pSPIx == SPI3){
			SPI3_PCLK_DI();
		}
	}
}

/*
 * Init and Deinit
 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{

	//Enable the peripheral clock for SPI peripheral
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);

    //first lets configure the SPI_CR1 Register
	uint32_t tempreg = 0;

	//1. Configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;

	//2. Configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
	{
		//bidi mode should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
	{
		//bidi mode should be set
		tempreg |= (1 << SPI_CR1_BIDIMODE);
	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
	{
		//bidi mode should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);

		//RXONLY bit must be set
		tempreg |= (1 << SPI_CR1_RXONLY);
	}

	//3. Configure the SPI serial clock speed(baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;

	//4. Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;

	//5. Configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;

	//6. Configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;

	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;

	pSPIHandle->pSPIx->CR1 = tempreg;
}


void SPI_DeInit(SPI_RegDef_t *pSPIx)
{
	if(pSPIx == SPI1)
	{
		SPI1_REG_RESET();
	}
	else if(pSPIx == SPI2)
	{
		SPI2_REG_RESET();
	}
	else if(pSPIx == SPI3){
		SPI3_REG_RESET();
	}
}




/*
 * Data read and write
 */
/************************************************************************************
 *  @fn                   - SPI_SendData(Blocking method or Polling based)
 *
 *  @brief                - This function will send data in blocking method
 *
 *  @param[in]            - pointer to address of SPI Register defination
 *  @param[in]            - Pointer to address of the Buffer
 *  @param[in]            - Length of the data
 *
 *  @return               - None
 *
 *  @Note                 - None
 *
 *  */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer,uint32_t Len)
{
     while(Len > 0)       //until length becomes zero this function will not return so it is called blocking method
     {
    	 //wait until TXe is set
    	 /* while( !(pSPIx->SPI_SR & (1 << 1)));  */
    	 while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);

    	 //2. Check the DFF bit in CR1
    	 if( (pSPIx->CR1 & (1 << SPI_CR1_DFF)))
    	 {
    		 //16 bit DFF
    		 //1.load the data into the DR
    		 pSPIx->DR = *((uint16_t *)pTxBuffer);
    		 Len--;
    		 Len--;
    		 (uint16_t *)pTxBuffer++;
    	 }
    	 else
    	 {
    		 //8 bit DFF
    		 //1. Load the data in to the DR
    		 pSPIx->DR = *pTxBuffer;
    		 Len--;
    		 pTxBuffer++;
    	 }
     }
}

/************************************************************************************
 *  @fn                   - SPI_ReceiveData(Blocking method or Polling based)
 *
 *  @brief                - This function will receive data in blocking method
 *
 *  @param[in]            - pointer to address of SPI Register defination
 *  @param[in]            - Pointer to address of the Buffer
 *  @param[in]            - Length of the data
 *
 *  @return               - None
 *
 *  @Note                 - None
 *
 *  */
void SPI_ReceiveData(SPI_RegDef_t *pSpix, uint8_t *pRxBuffer,uint32_t Len)
{
    while(Len > 0)       //until length becomes zero this function will not return so it is called blocking method
    {
   	 //wait until TXe is set
   	 /* while( !(pSPIx->SPI_SR & (1 << 1)));  */
   	 while(SPI_GetFlagStatus(pSPIx, SPI_RXNE_FLAG) == FLAG_RESET);

   	 //2. Check the DFF bit in CR1
   	 if( (pSPIx->CR1 & (1 << SPI_CR1_DFF)))
   	 {
   		 //16 bit DFF
   		 //1.load the data from DR to Rx Buffer
   		 *((uint16_t *)pRxBuffer) = pSPIx->DR ;
   		 Len--;
   		 Len--;
   		 (uint16_t *)pRxBuffer++;
   	 }
   	 else
   	 {
   		 //8 bit DFF
   		 //1. Load the data in to the DR
   		 *pRxBuffer = pSPIx->DR;
   		 Len--;
   		 pRxBuffer++;
   	 }
    }
}

/************************************************************************************
 *  @fn                   - SPI_SendDataIT(Interrupt method)
 *
 *  @brief                - This function will send data in interrupt method
 *
 *  @param[in]            - pointer to address of SPI Handle structure (as we are not directly writing data into data register in this function defination but handler is writing the data)
 *  @param[in]            - Pointer to address of the Buffer
 *  @param[in]            - Length of the data
 *
 *  @return               - None
 *
 *  @Note                 - None
 *
 *  */


uint8_t SPI_SendDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pTxBuffer,uint32_t Len)
{
    uint8_t state = pSPIHandle->TxState;

    if(state != SPI_BUSY_IN_TX)
    {
    	//1. Save the Tx buffer address and length info in some global variables
    	pSPIHandle->pTxBuffer = pTxBuffer;

    	pSPIHandle->TxLen = Len;

    	//2. Mark the SPI state as busy in transmission so that no other code can take over some SPI Peripheral until transmission is done
    	pSPIHandle->TxState = SPI_BUSY_IN_TX;

    	//3.Enable the TXEIE control bit to get interrupt whenever TXE flag is set in SR
    	pSPIHandle->pSPIx->CR2 |= (1 << SPI_CR2_TXEIE);
    }

    return state;
}

/************************************************************************************
 *  @fn                   - SPI_ReceiveDataIT(Interrupt method)
 *
 *  @brief                - This function will receive data in interrupt method
 *
 *  @param[in]            - pointer to address of SPI Handle structure (as we are not directly reading data from data register in this function defination but handler is reading the data)
 *  @param[in]            - Pointer to address of the Buffer
 *  @param[in]            - Length of the data
 *
 *  @return               - None
 *
 *  @Note                 - None
 *
 *  */


uint8_t SPI_ReceiveDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pRxBuffer,uint32_t Len)
{
    uint8_t state = pSPIHandle->RxState;

    if(state != SPI_BUSY_IN_RX)
    {
    	//1. Save the Tx buffer address and length info in some global variables
    	pSPIHandle->pRxBuffer = pRxBuffer;

    	pSPIHandle->RxLen = Len;

    	//2. Mark the SPI state as busy in transmission so that no other code can take over some SPI Peripheral until transmission is done
    	pSPIHandle->RxState = SPI_BUSY_IN_RX;

    	//3.Enable the TXEIE control bit to get interrupt whenever TXE flag is set in SR
    	pSPIHandle->pSPIx->CR2 |= (1 << SPI_CR2_RXNEIE);
    }

    return state;
}

/************************************************************************************
 *  @fn                   - SPI_PeripheralControl(Blocking method or Polling based)
 *
 *  @brief                - This function will enable the SPI peripheral
 *
 *  @param[in]            - pointer to address of SPI Register defination
 *  @param[in]            - Enable or disable
 *
 *  @return               - None
 *
 *  @Note                 - None
 *
 *  */


void SPI_PeripheralControl(SPI_RegDef_t *pSPIx,uint8_t EnOrDi)
{
	if(EnOrDi == ENABLE)
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
	}
	else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}

/************************************************************************************
 *  @fn                   - SPI_SSIConfig
 *
 *  @brief                - This function will set the SSI bit when SSM is enabled so that NSS is pulled to high internally
 *
 *  @param[in]            - pointer to address of SPI Register defination
 *  @param[in]            - Enable or disable
 *
 *  @return               - None
 *
 *  @Note                 - None
 *
 *  */
void SPI_SSIConfig(SPI_RegDef_t *pSPIx,uint8_t EnOrDi)
{
	if(EnOrDi == ENABLE)
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SSI);
	}
	else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
	}
}


/************************************************************************************
 *  @fn                   - SPI_SSOEConfig
 *
 *  @brief                - This function will enable the SSOE bit so that it actually means setting NSS output
 *                          (->when SSM=0,SPE=1,NSS o/p =0
 *                           ->when SSM=0,SPE=0,NSS o/p =1) (NSS o/p will be enabled when SSOE=1)
 *
 *  @param[in]            - pointer to address of SPI Register defination
 *  @param[in]            - Enable or disable
 *
 *  @return               - None
 *
 *  @Note                 - None
 *
 *  */
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx,uint8_t EnOrDi)
{
	if(EnOrDi == ENABLE)
	{
		pSPIx->CR1 |= (1 << SPI_CR2_SSOE);
	}
	else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR2_SSOE);
	}
}

void SPI_IRQ_Interrupt_Config(uint8_t IRQNumber, uint8_t EnorDi)
{
	if(EnorDi == ENABLE)
	{
		if(IRQNumber <= 31)
		{
			//program ISER0 Register
			*NVIC_ISER0 |= (1 << IRQNumber );
		}
		else if(IRQNumber > 31 && IRQNumber < 64)  //32 to 63
		{
			//program ISER1 Register
			*NVIC_ISER1 |= (1 << (IRQNumber % 32) );
		}
		else if(IRQNumber >= 64 && IRQNumber < 96)
		{
			//program ISER2 Register
			*NVIC_ISER2 |= (1 << (IRQNumber % 64) );
		}
	}
	else
	{
		if(IRQNumber <= 31)
		{
			//program ICER0 Register
			*NVIC_ICER0 |= (1 << IRQNumber );
		}
		else if(IRQNumber > 31 && IRQNumber < 64)  //32 to 63
		{
			//program ICER1 Register
			*NVIC_ICER1 |= (1 << (IRQNumber % 32) );
		}
		else if(IRQNumber >= 64 && IRQNumber < 96)
		{
			//program ICER2 Register
			*NVIC_ICER2 |= (1 << (IRQNumber % 64) );
		}
	}
}
void SPI_IRQ_Priority_Config(uint8_t IRQNumber,uint32_t IRQPriority)
{
	//1. first lets find out the ipr register
	uint8_t iprx = IRQNumber / 4;
	uint8_t iprx_section = IRQNumber % 4;

	uint8_t shift_amount = (8 * iprx_section) + ( 8 - NO_PR_BITS_IMPLEMENTED );

	*(NVIC_PR_BADE_ADDR + iprx) |= ( IRQPriority << shift_amount );

}

void SPI_IRQHandling(SPI_Handle_t *pHandle)
{
	uint8_t temp1,temp2;

	//first lets check for TXE
	temp1 = pHandle->pSPIx->SR & (1 << SPI_SR1_TXE);
	temp2 = pHandle->pSPIx->CR2 & (1 << SPI_CR2_TXEIE);

	if(temp1 && temp2)
	{
		//handle TXE
		spi_txe_interrupt_handle();
	}

	//first lets check for RXE
	temp1 = pHandle->pSPIx->SR & (1 << SPI_SR1_RXNE);
	temp2 = pHandle->pSPIx->CR2 & (1 << SPI_CR2_RXNEIE);

	if(temp1 && temp2)
	{
		//handle RXE
		spi_rxne_interrupt_handle();
	}

	//first lets check for TXE
	temp1 = pHandle->pSPIx->SR & (1 << SPI_SR1_TXE);
	temp2 = pHandle->pSPIx->CR2 & (1 << SPI_CR2_TXEIE);

	if(temp1 && temp2)
	{
		//handle ovr error
		spi_ovr_err_interrupt_handle();
	}
}

